//JUnit+Jenkins+SonarQube+EMail
pipeline {
    agent any

    environment {
        JAVA_HOME = 'C:\\Program Files\\Java\\jdk-17' // Update with your Java path
        PATH = "${JAVA_HOME}\\bin;${env.PATH}"
    }

    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'sonar', url: 'https://github.com/Mohammad-Arafath/JUnit_Math.git'
            }
        }

        stage('Compile') {
            steps {
                script {
                    bat '''
                    cd JUnit_Java
                    if not exist bin mkdir bin
                    javac -cp ".;lib\\junit-jupiter-api-5.11.4.jar;lib\\junit-jupiter-engine-5.11.4.jar;lib\\junit-platform-console-standalone-1.11.4.jar" -d bin JUinit_Test\\MathUtils.java JUinit_Test\\MathUtilsTest.java
                    '''
                }
            }
        }

        stage('Run Tests') {
            steps {
                script {
                    bat '''
                    cd JUnit_Java
                    java -jar lib\\junit-platform-console-standalone-1.11.4.jar --class-path bin --scan-class-path --reports-dir bin\\test-logs
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'Jenkins-Sonar', variable: 'SONAR_TOKEN')]) {
                    bat '''
                    cd JUnit_Java
                    C:\\sonar-scanner\\bin\\sonar-scanner ^
                    -Dsonar.projectKey=JUnit_Math ^
                    -Dsonar.sources=. ^
                    -Dsonar.java.binaries=bin ^
                    -Dsonar.host.url=http://localhost:9000 ^
                    -Dsonar.login=%SONAR_TOKEN%
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                def emailRecipients = 'shaon@opennets.net' // Update as needed
                def subject = "SUCCESS: Jenkins Build ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                def body = """
                    <p>Build Result: <b>SUCCESS</b></p>
                    <p>Job Name: ${env.JOB_NAME}</p>
                    <p>Build Number: ${env.BUILD_NUMBER}</p>
                    <p><a href="${env.BUILD_URL}">View Build</a></p>
                """

                emailext subject: subject,
                         body: body,
                         mimeType: 'text/html',
                         to: emailRecipients
            }
        }
        
        failure {
            script {
                def emailRecipients = 'shaon@opennets.net' // Update as needed
                def subject = "FAILURE: Jenkins Build ${env.JOB_NAME} #${env.BUILD_NUMBER}"
                def body = """
                    <p>Build Result: <b>FAILURE</b></p>
                    <p>Job Name: ${env.JOB_NAME}</p>
                    <p>Build Number: ${env.BUILD_NUMBER}</p>
                    <p><a href="${env.BUILD_URL}">View Build</a></p>
                """

                emailext subject: subject,
                         body: body,
                         mimeType: 'text/html',
                         to: emailRecipients
            }
        }
    }
}
