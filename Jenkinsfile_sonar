pipeline {
    agent any
    environment {
        JAVA_HOME = 'C:\\Program Files\\Java\\jdk-17'
        PATH = "${JAVA_HOME}\\bin;${env.PATH}"
    }
    stages {
        stage('Checkout Code') {
            steps {
                git branch: 'sonar', url: 'https://github.com/Mohammad-Arafath/JUnit_Math.git'
            }
        }

        stage('Compile') {
            steps {
                script {
                    bat '''
                    cd JUnit_Java
                    if not exist bin mkdir bin
                    javac -cp ".;lib\\junit-jupiter-api-5.11.4.jar;lib\\junit-jupiter-engine-5.11.4.jar;lib\\junit-platform-console-standalone-1.11.4.jar;lib\\jacocoagent.jar" -d bin JUinit_Test\\MathUtils.java JUinit_Test\\MathUtilsTest.java
                    '''
                }
            }
        }

        stage('Run Tests with JaCoCo') {
            steps {
                script {
                    bat '''
                    cd JUnit_Java
                    java -javaagent:lib\\jacocoagent.jar=destfile=bin\\jacoco.exec -jar lib\\junit-platform-console-standalone-1.11.4.jar --class-path bin --scan-class-path --reports-dir bin\\test-logs
                    java -jar lib\\jacococli.jar report bin\\jacoco.exec --classfiles bin --sourcefiles src --xml bin\\jacoco.xml
                    '''
                }
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withCredentials([string(credentialsId: 'Jenkins-Sonar', variable: 'SONAR_TOKEN')]) {
                    bat '''
                    cd JUnit_Java
                    C:\\sonar-scanner\\bin\\sonar-scanner ^
                        -Dsonar.projectKey=JUnit_Math ^
                        -Dsonar.sources=. ^
                        -Dsonar.java.binaries=bin ^
                        -Dsonar.host.url=http://localhost:9000 ^
                        -Dsonar.coverage.jacoco.xmlReportPaths=bin\\jacoco.xml ^
                        -Dsonar.login=%SONAR_TOKEN%
                    '''
                }
            }
        }
    }

    post {
        success {
            script {
                emailext subject: "Jenkins Build Success: ${env.JOB_NAME}",
                         body: "Build ${env.BUILD_NUMBER} completed successfully.\n\nCheck SonarQube results: http://localhost:9000/dashboard?id=JUnit_Math",
                         to: 'shaon@opennets.net'
            }
        }

        failure {
            script {
                emailext subject: "Jenkins Build Failed: ${env.JOB_NAME}",
                         body: "Build ${env.BUILD_NUMBER} has failed. Check Jenkins logs for details.",
                         to: 'shaon@opennets.net'
            }
        }
    }
}
